module nat

import bool
import pair

data nat = O | S nat

||| returns true if the argument is (represents) zero, otherwise false
isZero: nat -> bool
isZero O = true
isZero _ = false

||| returns the successor of any given nat
succ: nat -> nat
succ n = S n

||| returns the predecessor of any given nat
pred: nat -> nat
pred O = O
pred (S n) = n

||| return true if the argument is even otherwise false
evenb: nat -> bool
evenb O = true
evenb (S O) = false
evenb (S (S n)) = evenb n

oddb: nat -> bool
oddb n = not (evenb n)

||| given a pair of natural numbers, return its sum
addp: pair nat nat -> nat
addp (mkPair O m) = m
addp (mkPair (S n) m) = S (addp (mkPair n m))

add: nat -> nat -> nat
add O m = m
add (S n) m = S(add n m)

pf: nat -> nat
pf = add (S(S O))

||| given a pair of natural numbers, return its sum
multp: pair nat nat -> nat
multp (mkPair O m) = O
multp (mkPair (S n) m) = addp (mkPair m (multp (mkPair n m)))

factp: nat -> nat
factp O = (S O)
factp (S n) = multp (mkPair (S n) (factp n))

|||Given a pair of natural numbers (a, b), return a-b.
|||If a<= b, the answer will be zero.

subp: pair nat nat -> nat
subp (mkPair O m) = O
subp (mkPair n O) = n
subp (mkPair (S n) (S m)) = subp (mkPair n m)

||| Given a pair of natural numbers, (a, b), return true if a <= b, otherwise return false
lep: pair nat nat -> bool
lep (mkPair O b) = true
lep (mkPair (S a) O) = false
lep (mkPair (S a) (S b)) = lep (mkPair a b)

exp: pair nat nat -> nat
exp (mkPair x O) = S O
exp (mkPair x (S n)) = multp (mkPair x (exp (mkPair x n)))

eqp: pair nat nat -> bool
eqp (mkPair O O) = true
eqp (mkPair (S a) O) = false
eqp (mkPair O (S b)) = false
eqp (mkPair (S a) (S b)) = eqp (mkPair a b)

gtp: pair nat nat -> bool
gtp (mkPair O b) = false
gtp (mkPair (S a) O) = true
gtp (mkPair (S a) (S b)) = gtp (mkPair a b)

gep: pair nat nat -> bool
gep (mkPair a O) = true
gep (mkPair O (S b)) = false
gep (mkPair (S a) (S b)) = gep (mkPair a b)

ltp: pair nat nat -> bool
ltp (mkPair a O) = false
ltp (mkPair O (S b)) = true
ltp (mkPair (S a) (S b)) = ltp (mkPair a b)

fibp: nat -> nat
fibp O = O
fibp (S O) = (S O)
fibp (S (S n)) = addp (mkPair (fibp (S n)) (fibp n))
